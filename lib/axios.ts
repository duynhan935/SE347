import axios from "axios";

// T·∫°o instance
const api = axios.create({
    baseURL: "http://localhost:8085/api", // backend c·ªßa b·∫°n
    timeout: 10000,
});

// // Interceptor th√™m token v√†o header Authorization
// api.interceptors.request.use(
//     (config) => {
//         const token = localStorage.getItem("accessToken"); // gi·∫£ s·ª≠ b·∫°n l∆∞u JWT ·ªü localStorage
//         if (token && config.headers) {
//             config.headers.Authorization = `Bearer ${token}`;
//         }
//         return config;
//     },
//     (error) => {
//         return Promise.reject(error);
//     }
// );

// // Interceptor x·ª≠ l√Ω response l·ªói chung (option)
// api.interceptors.response.use(
//     (response) => response,
//     (error) => {
//         if (error.response?.status === 401) {
//             console.log("Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá");
//             // C√≥ th·ªÉ logout user ho·∫∑c redirect login
//         }
//         return Promise.reject(error);
//     }
// );

// üß© Interceptor x·ª≠ l√Ω l·ªói to√†n c·ª•c
api.interceptors.response.use(
    (response) => response,
    (error) => {
        const status = error.response?.status;
        const data = error.response?.data;

        console.group("%c‚ö†Ô∏è API Error", "color:red; font-weight:bold;");
        console.log("‚û°Ô∏è URL:", error.config?.url);
        console.log("‚û°Ô∏è Method:", error.config?.method?.toUpperCase());
        console.log("‚û°Ô∏è Status:", status ?? "Unknown");

        // N·∫øu backend c√≥ tr·∫£ v·ªÅ errorCode/message
        if (data?.errorCode || data?.message) {
            console.log("‚û°Ô∏è Error Code:", data.errorCode);
            console.log("‚û°Ô∏è Message:", data.message);
        } else {
            console.log("‚û°Ô∏è Raw Error:", error.message);
        }

        console.groupEnd();

        // ‚ö° T√πy ch·ªânh th√™m theo m√£ l·ªói HTTP
        switch (status) {
            case 400:
                console.error("Bad Request ‚Äì Ki·ªÉm tra d·ªØ li·ªáu g·ª≠i ƒëi");
                break;
            case 401:
                console.error("Unauthorized ‚Äì Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá");
                // C√≥ th·ªÉ g·ªçi logout() ho·∫∑c redirect login t·∫°i ƒë√¢y
                break;
            case 404:
                console.error("Not Found ‚Äì Kh√¥ng t√¨m th·∫•y t√†i nguy√™n");
                break;
            case 500:
                console.error("Internal Server Error ‚Äì L·ªói m√°y ch·ªß");
                break;
            default:
                console.error("Unknown Error ‚Äì", error.message);
        }

        return Promise.reject(error);
    }
);

export default api;
